"""
Written for Python 3.7.x
Tested with Python 3.7.7 on Windows 10

"""

# References;
#   - QImage Format Flags
#       - https://stackoverflow.com/questions/69572133/pyqt6-attributeerror-type-object-qimage-has-no-attribute-format-rgb888
#   - smoothScaled is missing at QT6;
#       - NONE
#

from stdo import stdo

import cv2

from PyQt5.QtCore import Qt

# smoothScaled is missing at QT6
from PyQt5.QtGui import QImage, QPixmap, QIcon
# QListWidgetItem, QToolButton, QVBoxLayout, QComboBox,
from PyQt5.QtWidgets import QGraphicsRectItem, QGraphicsPathItem, QGraphicsItem, QGraphicsEllipseItem, QGraphicsProxyWidget, QGraphicsTextItem, QGraphicsSimpleTextItem, QGraphicsPolygonItem, QGraphicsLineItem, QGraphicsPixmapItem, QListWidgetItem
from PyQt5.QtCore import QTimer


arguments = list()
arguments_output = str()

'''
This code is converting the numpy array to QImage and then convert it to QPixmap.
The code block has two if statements, one for keep_aspect_ratio=True and another for False.
If keep_aspect_ratio=True, we are using cv2\'s resize function with interpolation algorithm as cv2.INTER_AREA which will preserve the aspect ratio of image while resizing it.
- generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ]
'''
def numpy_To_QT_Type_Converter(image, QType=QPixmap, keep_aspect_ratio=True, convert_bgr_to_rgb=True, width=None, height=None, cv2_resize_algorithm=None):
    # qt_type_buffer = cv2.imread(image) if image is str else image
    qt_type_buffer = image
    
    if convert_bgr_to_rgb:
        qt_type_buffer = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    dim = [1, 1]
    h, w, ch = qt_type_buffer.shape

    # check to see if the width is None
    if width is not None or height is not None:
        if width is None:
            # calculate the ratio of the height and construct the
            # dimensions
            r = height / float(h)
            dim = (int(w * r), height)
            # otherwise, the height is None
        elif height is None:
            # calculate the ratio of the width and construct the
            # dimensions
            r = width / float(w)
            dim = (width, int(h * r))
        else:
            dim = (width, height)

    if cv2_resize_algorithm is not None:
        qt_type_buffer = cv2.resize(qt_type_buffer, dim, interpolation=cv2_resize_algorithm)
        
        h, w, ch = qt_type_buffer.shape
    
    bytesPerLine = ch * w

    """
    # PyQT5 has smoothScaled feature which is removed or moved at PyQT6
    #qt_type_buffer = QImage(qt_type_buffer.data, w, h, bytesPerLine, QImage.Format.Format_RGB888).smoothScaled(*dim) \
    qt_type_buffer = QImage(qt_type_buffer.data, w, h, bytesPerLine, QImage.Format.Format_RGB888).scaled(*dim) \
        if is_resize \
        else QImage(qt_type_buffer.data, w, h, bytesPerLine, QImage.Format.Format_RGB888)
    """
    # Firstly, convert the numpy image to QImage 
    if QType is QImage and QType is not QPixmap:
        qt_type_buffer = QImage(
            qt_type_buffer.data,
            w, h, bytesPerLine,
            #QImage.Format.Format_RGB888
            QImage.Format_RGB888
        ) \
            if dim is None \
            else QImage(
                qt_type_buffer.data,
                w, h, bytesPerLine,
                #QImage.Format.Format_RGB888
                QImage.Format_RGB888
            ).scaled(*dim)
    else:
        qt_type_buffer = QImage(
            qt_type_buffer.data, 
            w, h, bytesPerLine, 
            #QImage.Format.Format_RGB888
            QImage.Format_RGB888
        )
    
    # Lastly, convert the QImage to QPixmap for QGraphics Scene 
    if QType is QPixmap:
        # Aspect Ration: https://doc.qt.io/qt-5/qt.html#AspectRatioMode-enum
        qt_type_buffer = QPixmap(
            qt_type_buffer, 
            #w, h, 
            #bytesPerLine, 
            #QImage.Format.Format_RGB888
        ) if dim is None else QPixmap(
            qt_type_buffer,
            #w, h,
            #bytesPerLine,
            #QImage.Format.Format_RGB888
        ).scaled(
            *dim,
            aspectRatioMode=Qt.KeepAspectRatio if keep_aspect_ratio else Qt.IgnoreAspectRatio,
            transformMode=Qt.FastTransformation
        )

    return qt_type_buffer

################
### QT SCENE ###
################

'''
This code is adding the background item to the scene.
- generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ]
'''
# For Backport Support
def QT_Scene_Add_Item_To_Background(scene, item):
    QT_Scene_Add_Item_To_Index(scene, item, index=0)

def QT_Scene_Add_Item_To_Index(scene, item, index=0):
    item_list_backup = list()

    for item_in_scene in scene.items():
        item_list_backup.append(item_in_scene)
        scene.removeItem(item_in_scene)

    item_list_backup.insert(index, item)

    for item_in_backup in item_list_backup:
        QT_Scene_Add_Item(scene, item_in_backup)

def QT_Scene_Set_Item_Background(scene, item):
    QT_Scene_Set_Item_To_Index(scene, item, index=0)
    
def QT_Scene_Set_Item_To_Index(scene, item, index):
    item_list_backup = list()
    if len(scene.items()):
        for i, item_in_scene in enumerate(scene.items()):
            if i == index:
                item_list_backup.append(item)
                scene.removeItem(item_in_scene)
            else:
                item_list_backup.append(item_in_scene)
                scene.removeItem(item_in_scene)
    else:
        item_list_backup.append(item)
    
    # item_list_backup.reverse()
    for item_in_backup in item_list_backup:
        QT_Scene_Add_Item(scene, item_in_backup)

def QT_Scene_Set_Item(scene, item):
    for item_in_scene in scene.items():
        scene.removeItem(item_in_scene)
    QT_Scene_Add_Item(scene, item)
    
def QT_Scene_Add_Item_To_Foreground(scene, item):
    QT_Scene_Append_Item(scene, item)

def QT_Scene_Append_Item(scene, item):
    item_list_backup = list()
    # if len(scene.items()):
    for item_in_scene in scene.items():
        item_list_backup.append(item_in_scene)
        scene.removeItem(item_in_scene)
        
    item_list_backup.append(item)
    
    for item_in_backup in item_list_backup:
        QT_Scene_Add_Item(scene, item_in_backup)

def QT_Scene_Add_Item(scene, item):
        type_of_item = type(item)
        # if type_of_item is not QPixmap and type_of_item is not QGraphicsPixmapItem:
        #     stdo(1, f"Type of Item: {str(type_of_item)} | {item.__class__}")
        
        if type_of_item is QPixmap:
            scene.addPixmap(item)
        elif type_of_item is QImage:
            scene.addPixmap(item)
        elif type_of_item is QGraphicsLineItem:
            scene.addLine(item)
        elif type_of_item is QGraphicsEllipseItem:
            scene.addEllipse(item)
        elif type_of_item is QGraphicsPathItem:
            scene.addPath(item)
        elif type_of_item is QGraphicsPolygonItem:
            scene.addPolygon(item)
        elif type_of_item is QGraphicsRectItem:
            scene.addRect(item)
        elif type_of_item is QGraphicsSimpleTextItem:
            scene.addSimpleText(item)
        elif type_of_item is QGraphicsTextItem:
            scene.addText(item)
        elif type_of_item is QGraphicsProxyWidget:
            scene.addWidget(item)
        elif type_of_item is QGraphicsItem:
            scene.addItem(item)
        elif type_of_item is QGraphicsPixmapItem:
            # https://doc.qt.io/qtforpython-5/PySide2/QtWidgets/QGraphicsPixmapItem.html#PySide2.QtWidgets.PySide2.QtWidgets.QGraphicsPixmapItem.pixmap
            scene.addPixmap(item.pixmap())
        elif str(type_of_item) == "<class 'structure_ui.ROI_Rectangle'>":
            scene.addItem(item)
        elif str(type_of_item) == "<class 'structure_ui.ROI_Rectangle_Hold_Point'>":
            scene.addItem(item)
        else:
            stdo(
                1, f"Unknown '{str(type_of_item)}' Type for Item in scene. (Class: {item.__class__} | Base: {item.__class__.__bases__}) "
            )
            # scene.addItem(item)

################
################
################

def get_Color(image, x, y, is_QT_Type=False):
        if image is not None:
            if is_QT_Type:
                if type(image) is QPixmap:
                    image = QImage(image)
                """
                w, h = image.size().width(), image.size().height()
                if x < w and y < h:
                """
                if image.valid(x, y):
                    qt_color = image.pixelColor(x, y)
                    #if qt_color.red() and qt_color.green() and qt_color.blue():
                    return qt_color.red(), qt_color.green(), qt_color.blue()
                else:
                    return (0, 0, 0)
            else:
                w, h = image.shape()
                if x < w and y < h:
                    return image[int(x)][int(y)]
                else:
                    return (0, 0, 0)
        else:
            return (0, 0, 0)

def lcdNumber_Set(lcdNumber_list, lcdNumber_params):
    # https://doc.qt.io/qtforpython-5/PySide2/QtWidgets/QLCDNumber.html
    for index in range(len(lcdNumber_list)):
        lcdNumber_list[index].display(lcdNumber_params[index])

##############
### QTIMER ###
##############

def qtimer_Create_And_Run(parent, connection, delay=100, is_needed_start=True, is_single_shot=False):
    timer = QTimer(parent)
    timer.setInterval(delay)
    timer.timeout.connect(connection)
    timer.setSingleShot(is_single_shot)
    if is_needed_start:
        timer.start()
    return timer

def qtimer_All_Stop(qtimer_dict):
    for key, qtimer in qtimer_dict.items():
        stdo(1, "{} qtimer is stopped".format(key))
        qtimer.stop() if qtimer.isActive() else None

##############
##############
##############

################
### ELEMENTS ###
################

def hide_elements(elements):
    for element in elements:
        element.hide()

def show_elements(elements):
    for element in elements:
        element.show()

################
################
################

########################
### LIST WIDGET ITEM ###
########################

def list_Widget_Item(title="", icon_path="", icon_width=10, icon_height=10):
    item = QListWidgetItem()

    if icon_path != "":
        image = cv2.imread(icon_path)
        image_q = numpy_To_QT_Type_Converter(
            image=image, QType=QImage,
            keep_aspect_ratio=True,
            convert_bgr_to_rgb=True,
            width=icon_width, height=icon_height,
            cv2_resize_algorithm=None
        )
        item.setIcon(QIcon(QPixmap(image_q)))
    if title != "":
        item.setText(title)
        
    return item

########################
########################
########################

###################
### LIST WIDGET ###
###################

def list_Widget_Clear(list_widgets):
    for list_widget in list_widgets:
        list_widget.clear()

###################
###################
###################

